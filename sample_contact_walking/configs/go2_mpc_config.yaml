general_settings:
  nodes: 20 #32
  verbose: True
  node_dt_type: SmallFirst # Even, SmallFirst, Adaptive
  node_dt: 0.025 #0.025. Why does going to 0.015 hurt the performance?
  first_node_dt: 0.01 # 0.01
  compile_derivatives: False #True
  base_frame: "torso"
  scale_cost: False
  max_initial_solves: 20
  initial_constraint_tol: 5e-4
  nodes_full_dynamics: 4 #4   # Also determines how many nodes have torque constraints
  delay_prediction_dt: 0 #-1e-2 #5e-3 # TODO: Tune or disable
  terminal_cost_weight: 1 #50 Having a smaller terminal weight seems to help for now
solver_settings:
  rel_tol: 1e-3
  abs_tol: 1e-3
  verbose: False
  polish: False
  rho: 0.05 #0.05 is a normal value. 0.01 seems to work really well for standing still in sim
  alpha: 1.6 # 1.6, 1.1
  sigma: 1e-6 # 1e-10
  adaptive_rho: False
  max_iter: 20
  scaling: 10
constraints:
  friction_coef: 0.5  # TODO: Tune this
  max_grf: 800
  collisions:
    - frame1: "FR_foot"
      frame2: "FL_foot"
      radius1: 0.06
      radius2: 0.06
    - frame1: "RR_foot"
      frame2: "RL_foot"
      radius1: 0.06
      radius2: 0.06
    - frame1: "FR_foot"
      frame2: "RR_foot"
      radius1: 0.06
      radius2: 0.06
    - frame1: "FL_foot"
      frame2: "RL_foot"
      radius1: 0.06
      radius2: 0.06
  # TODO: Add hand and knee collisions
costs:
  - type: ConfigurationTracking
    name: "ConfigTracking"
    weight:  [ 10.0, 10.0, 10, #1.0, 1.0, 10., # 10.0
          1.5, 1.5, 1.5,
          #1.5, 1.5, 1.5,
          # 10, 10, 10,          # FL
          # 10, 10, 10,          # FR
          # 10, 10, 10,          # RL
          # 10, 10, 10]
          0.001, 0.1, 0.001,          # FL
          0.001, 0.1, 0.001,          # FR
          0.001, 0.1, 0.001,          # RL
          0.001, 0.1, 0.001,]          # RR
  - type: VelocityTracking
    name: "VelocityTracking"
    weight: [1, 1, 5,
        .5, .5, .5,
        0.1, 0.01, 0.0,         # FL
        0.1, 0.01, 0.0,         # FR
        0.1, 0.01, 0.0,         # RL
        0.1, 0.01, 0.0]         # RR
  - type: TorqueRegularization
    name: "TorqueReg"
    weight: [.001, .001, .001,       # FL
             .001, .001, .001,       # FR
             .001, .001, .001,       # RL
             .001, .001, .001]       # RR
  - type: ForceRegularization
    name: "ForceReg"
    weight: [0.0001, 0.0001, 0.01]
  # - type: ForwardKinematics
  #   name: "FLFoot"
  #   weight: [0.0, 0.0, 10]
  #   frame: "FL_foot"
  # - type: ForwardKinematics
  #   name: "FRFoot"
  #   weight: [0.0, 0.0, 0]
  #   frame: "FR_foot"
  # - type: ForwardKinematics
  #   name: "RLFoot"
  #   weight: [0.0, 0.0, 10]
  #   frame: "RL_foot"
  # - type: ForwardKinematics
  #   name: "RRFoot"
  #   weight: [0.0, 0.0, 10]
  #   frame: "RR_foot"
contacts:
  contact_frames: ["RL_foot", "FR_foot", "FL_foot", "RR_foot"]

line_search:
  alpha_min: 1e-3
  large_constraint_vio: 1e-2
  small_constraint_vio: 1e-6
  constraint_reduction_mult: 1e-6
  alpha_step: 0.5 # Since the line search is high variance, lowering this helps
  armijo_constant: 1e-4

  # Misc notes:
  # When rho = 0.1 I seem to follow the trajectory better (i.e. better open loop performance), but I have more oscillations and drift
  # When rho = 0.02 almost all of the drift and oscillations are removed but the open loop tracking is significantly worse.
  # In reality I think the better open loop performance is probably due to have better constraint satisfaction on the dynamics (but that needs confirmation)
  # Also unclear if it is just that the natural osciallations of the rho somehow help to stabilize